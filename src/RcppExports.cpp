// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// adaptive_nonlocal_means_denoising
NumericVector adaptive_nonlocal_means_denoising(NumericVector ima, IntegerVector dims, int v, int f, double h);
RcppExport SEXP _utils4ni_adaptive_nonlocal_means_denoising(SEXP imaSEXP, SEXP dimsSEXP, SEXP vSEXP, SEXP fSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptive_nonlocal_means_denoising(ima, dims, v, f, h));
    return rcpp_result_gen;
END_RCPP
}
// cCreateMask
NumericVector cCreateMask(NumericVector ima, IntegerVector dims, int c, NumericVector medias);
RcppExport SEXP _utils4ni_cCreateMask(SEXP imaSEXP, SEXP dimsSEXP, SEXP cSEXP, SEXP mediasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type medias(mediasSEXP);
    rcpp_result_gen = Rcpp::wrap(cCreateMask(ima, dims, c, medias));
    return rcpp_result_gen;
END_RCPP
}
// cTruncado
NumericVector cTruncado(NumericVector ima, IntegerVector dims);
RcppExport SEXP _utils4ni_cTruncado(SEXP imaSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cTruncado(ima, dims));
    return rcpp_result_gen;
END_RCPP
}
// cgradientmodule
NumericVector cgradientmodule(NumericVector ima, IntegerVector dims);
RcppExport SEXP _utils4ni_cgradientmodule(SEXP imaSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cgradientmodule(ima, dims));
    return rcpp_result_gen;
END_RCPP
}
// confusion_matrix
IntegerMatrix confusion_matrix(IntegerVector label1, IntegerVector label2);
RcppExport SEXP _utils4ni_confusion_matrix(SEXP label1SEXP, SEXP label2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type label1(label1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label2(label2SEXP);
    rcpp_result_gen = Rcpp::wrap(confusion_matrix(label1, label2));
    return rcpp_result_gen;
END_RCPP
}
// connected_components
IntegerVector connected_components(IntegerVector image);
RcppExport SEXP _utils4ni_connected_components(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(connected_components(image));
    return rcpp_result_gen;
END_RCPP
}
// cvolfilter2d
NumericVector cvolfilter2d(NumericVector ima, IntegerVector dims, int v);
RcppExport SEXP _utils4ni_cvolfilter2d(SEXP imaSEXP, SEXP dimsSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cvolfilter2d(ima, dims, v));
    return rcpp_result_gen;
END_RCPP
}
// defuzzify
IntegerVector defuzzify(NumericVector image, int ncores);
RcppExport SEXP _utils4ni_defuzzify(SEXP imageSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(defuzzify(image, ncores));
    return rcpp_result_gen;
END_RCPP
}
// defuzzify_list
IntegerVector defuzzify_list(List images, int ncores);
RcppExport SEXP _utils4ni_defuzzify_list(SEXP imagesSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type images(imagesSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(defuzzify_list(images, ncores));
    return rcpp_result_gen;
END_RCPP
}
// extend_labels
IntegerVector extend_labels(IntegerVector pIn, IntegerVector maskImage);
RcppExport SEXP _utils4ni_extend_labels(SEXP pInSEXP, SEXP maskImageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type pIn(pInSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type maskImage(maskImageSEXP);
    rcpp_result_gen = Rcpp::wrap(extend_labels(pIn, maskImage));
    return rcpp_result_gen;
END_RCPP
}
// map_ids_workhorse
IntegerVector map_ids_workhorse(IntegerVector x, IntegerVector source, IntegerVector target);
RcppExport SEXP _utils4ni_map_ids_workhorse(SEXP xSEXP, SEXP sourceSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(map_ids_workhorse(x, source, target));
    return rcpp_result_gen;
END_RCPP
}
// map_extra_classes
IntegerVector map_extra_classes(IntegerVector x, IntegerVector source, int remaining);
RcppExport SEXP _utils4ni_map_extra_classes(SEXP xSEXP, SEXP sourceSEXP, SEXP remainingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int >::type remaining(remainingSEXP);
    rcpp_result_gen = Rcpp::wrap(map_extra_classes(x, source, remaining));
    return rcpp_result_gen;
END_RCPP
}
// mask_values
NumericVector mask_values(NumericVector input, double low, double high, double in_val, double out_val);
RcppExport SEXP _utils4ni_mask_values(SEXP inputSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP in_valSEXP, SEXP out_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type in_val(in_valSEXP);
    Rcpp::traits::input_parameter< double >::type out_val(out_valSEXP);
    rcpp_result_gen = Rcpp::wrap(mask_values(input, low, high, in_val, out_val));
    return rcpp_result_gen;
END_RCPP
}
// get_neighbours
IntegerVector get_neighbours(NumericVector array, int width);
RcppExport SEXP _utils4ni_get_neighbours(SEXP arraySEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_neighbours(array, width));
    return rcpp_result_gen;
END_RCPP
}
// fast_read_nifti
NumericVector fast_read_nifti(SEXP filename);
RcppExport SEXP _utils4ni_fast_read_nifti(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_read_nifti(filename));
    return rcpp_result_gen;
END_RCPP
}
// read_nifti_batch_4d
SEXP read_nifti_batch_4d(std::vector< std::string > filenames);
RcppExport SEXP _utils4ni_read_nifti_batch_4d(SEXP filenamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type filenames(filenamesSEXP);
    rcpp_result_gen = Rcpp::wrap(read_nifti_batch_4d(filenames));
    return rcpp_result_gen;
END_RCPP
}
// read_nifti
SEXP read_nifti(SEXP filename);
RcppExport SEXP _utils4ni_read_nifti(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(read_nifti(filename));
    return rcpp_result_gen;
END_RCPP
}
// constrained_init_memory
void constrained_init_memory(IntegerVector dims, int n_templates, int patch_size, int search_size, IntegerVector voxel_lookup_table, IntegerVector kANN, int ncores);
RcppExport SEXP _utils4ni_constrained_init_memory(SEXP dimsSEXP, SEXP n_templatesSEXP, SEXP patch_sizeSEXP, SEXP search_sizeSEXP, SEXP voxel_lookup_tableSEXP, SEXP kANNSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type n_templates(n_templatesSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type search_size(search_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    constrained_init_memory(dims, n_templates, patch_size, search_size, voxel_lookup_table, kANN, ncores);
    return R_NilValue;
END_RCPP
}
// patches_similarity_memory
void patches_similarity_memory(NumericVector input_image, StringVector template_filenames, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector patch_neighbours, IntegerVector kANN, NumericVector similarities, int ncores);
RcppExport SEXP _utils4ni_patches_similarity_memory(SEXP input_imageSEXP, SEXP template_filenamesSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP patch_neighboursSEXP, SEXP kANNSEXP, SEXP similaritiesSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input_image(input_imageSEXP);
    Rcpp::traits::input_parameter< StringVector >::type template_filenames(template_filenamesSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type similarities(similaritiesSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    patches_similarity_memory(input_image, template_filenames, actual_voxels, voxel_lookup_table, patch_neighbours, kANN, similarities, ncores);
    return R_NilValue;
END_RCPP
}
// propagation_step_memory
void propagation_step_memory(NumericVector input_image, StringVector template_filenames, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector patch_neighbours, IntegerVector kANN, int direction, int patch_size, int stride, NumericVector similarities, int ncores);
RcppExport SEXP _utils4ni_propagation_step_memory(SEXP input_imageSEXP, SEXP template_filenamesSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP patch_neighboursSEXP, SEXP kANNSEXP, SEXP directionSEXP, SEXP patch_sizeSEXP, SEXP strideSEXP, SEXP similaritiesSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input_image(input_imageSEXP);
    Rcpp::traits::input_parameter< StringVector >::type template_filenames(template_filenamesSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< int >::type direction(directionSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type similarities(similaritiesSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    propagation_step_memory(input_image, template_filenames, actual_voxels, voxel_lookup_table, patch_neighbours, kANN, direction, patch_size, stride, similarities, ncores);
    return R_NilValue;
END_RCPP
}
// constrained_random_search_memory
void constrained_random_search_memory(NumericVector input_image, StringVector template_filenames, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector kANN, int patch_size, IntegerVector patch_neighbours, int search_size_max, NumericVector similarities, int max_random_neighbours, int ncores);
RcppExport SEXP _utils4ni_constrained_random_search_memory(SEXP input_imageSEXP, SEXP template_filenamesSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP kANNSEXP, SEXP patch_sizeSEXP, SEXP patch_neighboursSEXP, SEXP search_size_maxSEXP, SEXP similaritiesSEXP, SEXP max_random_neighboursSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input_image(input_imageSEXP);
    Rcpp::traits::input_parameter< StringVector >::type template_filenames(template_filenamesSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< int >::type search_size_max(search_size_maxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type similarities(similaritiesSEXP);
    Rcpp::traits::input_parameter< int >::type max_random_neighbours(max_random_neighboursSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    constrained_random_search_memory(input_image, template_filenames, actual_voxels, voxel_lookup_table, kANN, patch_size, patch_neighbours, search_size_max, similarities, max_random_neighbours, ncores);
    return R_NilValue;
END_RCPP
}
// label_fusion_memory
void label_fusion_memory(StringVector label_filenames, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector label_ids, IntegerVector kANN, IntegerVector patch_neighbours, double lambda, double sigma2, NumericVector match, NumericVector new_voting, int ncores);
RcppExport SEXP _utils4ni_label_fusion_memory(SEXP label_filenamesSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP label_idsSEXP, SEXP kANNSEXP, SEXP patch_neighboursSEXP, SEXP lambdaSEXP, SEXP sigma2SEXP, SEXP matchSEXP, SEXP new_votingSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type label_filenames(label_filenamesSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label_ids(label_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type match(matchSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_voting(new_votingSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    label_fusion_memory(label_filenames, actual_voxels, voxel_lookup_table, label_ids, kANN, patch_neighbours, lambda, sigma2, match, new_voting, ncores);
    return R_NilValue;
END_RCPP
}
// obtain_candidates_memory
List obtain_candidates_memory(NumericVector image, StringVector template_files, int patch_size, int search_size, int stride, int max_iter, int max_random_neighbours, int ncores);
RcppExport SEXP _utils4ni_obtain_candidates_memory(SEXP imageSEXP, SEXP template_filesSEXP, SEXP patch_sizeSEXP, SEXP search_sizeSEXP, SEXP strideSEXP, SEXP max_iterSEXP, SEXP max_random_neighboursSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< StringVector >::type template_files(template_filesSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type search_size(search_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_random_neighbours(max_random_neighboursSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(obtain_candidates_memory(image, template_files, patch_size, search_size, stride, max_iter, max_random_neighbours, ncores));
    return rcpp_result_gen;
END_RCPP
}
// count_elegible
int count_elegible(NumericVector image, int patch_size, int search_size, int stride, IntegerVector voxel_lookup_table);
RcppExport SEXP _utils4ni_count_elegible(SEXP imageSEXP, SEXP patch_sizeSEXP, SEXP search_sizeSEXP, SEXP strideSEXP, SEXP voxel_lookup_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type search_size(search_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(count_elegible(image, patch_size, search_size, stride, voxel_lookup_table));
    return rcpp_result_gen;
END_RCPP
}
// count_elegible_masked
int count_elegible_masked(NumericVector image, IntegerVector mask, int patch_size, int search_size, int stride, IntegerVector voxel_lookup_table);
RcppExport SEXP _utils4ni_count_elegible_masked(SEXP imageSEXP, SEXP maskSEXP, SEXP patch_sizeSEXP, SEXP search_sizeSEXP, SEXP strideSEXP, SEXP voxel_lookup_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type search_size(search_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(count_elegible_masked(image, mask, patch_size, search_size, stride, voxel_lookup_table));
    return rcpp_result_gen;
END_RCPP
}
// constrained_initialization_omp
void constrained_initialization_omp(NumericVector input_image, NumericVector template4D, int patch_size, int search_size, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector kANN, int ncores);
RcppExport SEXP _utils4ni_constrained_initialization_omp(SEXP input_imageSEXP, SEXP template4DSEXP, SEXP patch_sizeSEXP, SEXP search_sizeSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP kANNSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input_image(input_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type template4D(template4DSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type search_size(search_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    constrained_initialization_omp(input_image, template4D, patch_size, search_size, actual_voxels, voxel_lookup_table, kANN, ncores);
    return R_NilValue;
END_RCPP
}
// all_patches_similarity_omp
void all_patches_similarity_omp(NumericVector input_image, NumericVector template4D, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector patch_neighbours, IntegerVector kANN, NumericVector similarities, int method, int ncores);
RcppExport SEXP _utils4ni_all_patches_similarity_omp(SEXP input_imageSEXP, SEXP template4DSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP patch_neighboursSEXP, SEXP kANNSEXP, SEXP similaritiesSEXP, SEXP methodSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input_image(input_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type template4D(template4DSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type similarities(similaritiesSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    all_patches_similarity_omp(input_image, template4D, actual_voxels, voxel_lookup_table, patch_neighbours, kANN, similarities, method, ncores);
    return R_NilValue;
END_RCPP
}
// propagation_step_omp
void propagation_step_omp(NumericVector input_image, NumericVector template4D, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector patch_neighbours, IntegerVector kANN, int direction, int patch_size, int stride, NumericVector similarities, int method, int ncores);
RcppExport SEXP _utils4ni_propagation_step_omp(SEXP input_imageSEXP, SEXP template4DSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP patch_neighboursSEXP, SEXP kANNSEXP, SEXP directionSEXP, SEXP patch_sizeSEXP, SEXP strideSEXP, SEXP similaritiesSEXP, SEXP methodSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input_image(input_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type template4D(template4DSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< int >::type direction(directionSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type similarities(similaritiesSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    propagation_step_omp(input_image, template4D, actual_voxels, voxel_lookup_table, patch_neighbours, kANN, direction, patch_size, stride, similarities, method, ncores);
    return R_NilValue;
END_RCPP
}
// constrained_random_search_omp
void constrained_random_search_omp(NumericVector input_image, NumericVector template4D, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector kANN, int patch_size, IntegerVector patch_neighbours, int search_size_max, NumericVector similarities, int max_random_neighbours, int method, int ncores);
RcppExport SEXP _utils4ni_constrained_random_search_omp(SEXP input_imageSEXP, SEXP template4DSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP kANNSEXP, SEXP patch_sizeSEXP, SEXP patch_neighboursSEXP, SEXP search_size_maxSEXP, SEXP similaritiesSEXP, SEXP max_random_neighboursSEXP, SEXP methodSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input_image(input_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type template4D(template4DSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< int >::type search_size_max(search_size_maxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type similarities(similaritiesSEXP);
    Rcpp::traits::input_parameter< int >::type max_random_neighbours(max_random_neighboursSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    constrained_random_search_omp(input_image, template4D, actual_voxels, voxel_lookup_table, kANN, patch_size, patch_neighbours, search_size_max, similarities, max_random_neighbours, method, ncores);
    return R_NilValue;
END_RCPP
}
// label_fusion2_omp
void label_fusion2_omp(IntegerVector labels4D, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector label_ids, IntegerVector kANN, IntegerVector patch_neighbours, double lambda, double sigma2, NumericVector match, NumericVector new_voting, int ncores);
RcppExport SEXP _utils4ni_label_fusion2_omp(SEXP labels4DSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP label_idsSEXP, SEXP kANNSEXP, SEXP patch_neighboursSEXP, SEXP lambdaSEXP, SEXP sigma2SEXP, SEXP matchSEXP, SEXP new_votingSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labels4D(labels4DSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label_ids(label_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type match(matchSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_voting(new_votingSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    label_fusion2_omp(labels4D, actual_voxels, voxel_lookup_table, label_ids, kANN, patch_neighbours, lambda, sigma2, match, new_voting, ncores);
    return R_NilValue;
END_RCPP
}
// label_fusion_omp_fast
void label_fusion_omp_fast(IntegerVector labels4D, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector label_ids, IntegerVector kANN, IntegerVector patch_neighbours, double lambda, double sigma2, NumericVector match, IntegerVector new_voting, NumericVector new_sim, int ncores);
RcppExport SEXP _utils4ni_label_fusion_omp_fast(SEXP labels4DSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP label_idsSEXP, SEXP kANNSEXP, SEXP patch_neighboursSEXP, SEXP lambdaSEXP, SEXP sigma2SEXP, SEXP matchSEXP, SEXP new_votingSEXP, SEXP new_simSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labels4D(labels4DSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label_ids(label_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type match(matchSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type new_voting(new_votingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_sim(new_simSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    label_fusion_omp_fast(labels4D, actual_voxels, voxel_lookup_table, label_ids, kANN, patch_neighbours, lambda, sigma2, match, new_voting, new_sim, ncores);
    return R_NilValue;
END_RCPP
}
// label_fusion_mode
void label_fusion_mode(IntegerVector my_labels, IntegerVector result, NumericVector my_similarities, int ncores);
RcppExport SEXP _utils4ni_label_fusion_mode(SEXP my_labelsSEXP, SEXP resultSEXP, SEXP my_similaritiesSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type my_labels(my_labelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type result(resultSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type my_similarities(my_similaritiesSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    label_fusion_mode(my_labels, result, my_similarities, ncores);
    return R_NilValue;
END_RCPP
}
// image_fusion_omp
void image_fusion_omp(NumericVector labels4D, int actual_voxels, IntegerVector voxel_lookup_table, IntegerVector kANN, IntegerVector patch_neighbours, double lambda, double sigma2, NumericVector match, NumericVector new_voting, IntegerVector voxel_candidate, int ncores);
RcppExport SEXP _utils4ni_image_fusion_omp(SEXP labels4DSEXP, SEXP actual_voxelsSEXP, SEXP voxel_lookup_tableSEXP, SEXP kANNSEXP, SEXP patch_neighboursSEXP, SEXP lambdaSEXP, SEXP sigma2SEXP, SEXP matchSEXP, SEXP new_votingSEXP, SEXP voxel_candidateSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type labels4D(labels4DSEXP);
    Rcpp::traits::input_parameter< int >::type actual_voxels(actual_voxelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_lookup_table(voxel_lookup_tableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kANN(kANNSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch_neighbours(patch_neighboursSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type match(matchSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_voting(new_votingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type voxel_candidate(voxel_candidateSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    image_fusion_omp(labels4D, actual_voxels, voxel_lookup_table, kANN, patch_neighbours, lambda, sigma2, match, new_voting, voxel_candidate, ncores);
    return R_NilValue;
END_RCPP
}
// get_windows_at
NumericVector get_windows_at(NumericVector V, int width, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _utils4ni_get_windows_at(SEXP VSEXP, SEXP widthSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_windows_at(V, width, x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// results_to_volume
void results_to_volume(NumericVector V, int width, NumericVector res, NumericVector counts, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _utils4ni_results_to_volume(SEXP VSEXP, SEXP widthSEXP, SEXP resSEXP, SEXP countsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    results_to_volume(V, width, res, counts, x, y, z);
    return R_NilValue;
END_RCPP
}
// results_to_volume_label
void results_to_volume_label(NumericVector V, int width, NumericVector res, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _utils4ni_results_to_volume_label(SEXP VSEXP, SEXP widthSEXP, SEXP resSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    results_to_volume_label(V, width, res, x, y, z);
    return R_NilValue;
END_RCPP
}
// results_to_volume_label_with_distance
void results_to_volume_label_with_distance(NumericVector V, int width, NumericVector res, NumericVector last_distance, IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _utils4ni_results_to_volume_label_with_distance(SEXP VSEXP, SEXP widthSEXP, SEXP resSEXP, SEXP last_distanceSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type last_distance(last_distanceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    results_to_volume_label_with_distance(V, width, res, last_distance, x, y, z);
    return R_NilValue;
END_RCPP
}
// regularize
NumericVector regularize(NumericVector image, NumericVector kernel, int ncores);
RcppExport SEXP _utils4ni_regularize(SEXP imageSEXP, SEXP kernelSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(regularize(image, kernel, ncores));
    return rcpp_result_gen;
END_RCPP
}
// sum_4d
NumericVector sum_4d(NumericVector values);
RcppExport SEXP _utils4ni_sum_4d(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_4d(values));
    return rcpp_result_gen;
END_RCPP
}
// sum_by_ROI
NumericVector sum_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_sum_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// max_by_ROI
NumericVector max_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_max_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(max_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// min_by_ROI
NumericVector min_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_min_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(min_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// count_by_ROI
IntegerVector count_by_ROI(IntegerVector labelled);
RcppExport SEXP _utils4ni_count_by_ROI(SEXP labelledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    rcpp_result_gen = Rcpp::wrap(count_by_ROI(labelled));
    return rcpp_result_gen;
END_RCPP
}
// mean_by_ROI
NumericVector mean_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_mean_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// segmentation
NumericVector segmentation(NumericVector image, NumericVector otsu_estimates);
RcppExport SEXP _utils4ni_segmentation(SEXP imageSEXP, SEXP otsu_estimatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type otsu_estimates(otsu_estimatesSEXP);
    rcpp_result_gen = Rcpp::wrap(segmentation(image, otsu_estimates));
    return rcpp_result_gen;
END_RCPP
}
// which_max
NumericVector which_max(NumericVector image);
RcppExport SEXP _utils4ni_which_max(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(which_max(image));
    return rcpp_result_gen;
END_RCPP
}
// to_categorical_volume_cpp
IntegerVector to_categorical_volume_cpp(NumericVector image, IntegerVector unique_labels);
RcppExport SEXP _utils4ni_to_categorical_volume_cpp(SEXP imageSEXP, SEXP unique_labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type unique_labels(unique_labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(to_categorical_volume_cpp(image, unique_labels));
    return rcpp_result_gen;
END_RCPP
}
// transform_volume
NumericVector transform_volume(NumericVector V, NumericVector M, IntegerVector target_dims, int method);
RcppExport SEXP _utils4ni_transform_volume(SEXP VSEXP, SEXP MSEXP, SEXP target_dimsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_dims(target_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_volume(V, M, target_dims, method));
    return rcpp_result_gen;
END_RCPP
}
// deform_volume
NumericVector deform_volume(NumericVector V, NumericVector Dx, NumericVector Dy, NumericVector Dz, IntegerVector target_dims, int method);
RcppExport SEXP _utils4ni_deform_volume(SEXP VSEXP, SEXP DxSEXP, SEXP DySEXP, SEXP DzSEXP, SEXP target_dimsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dx(DxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dy(DySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dz(DzSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_dims(target_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(deform_volume(V, Dx, Dy, Dz, target_dims, method));
    return rcpp_result_gen;
END_RCPP
}
// deform_volume_candidates
NumericVector deform_volume_candidates(NumericVector V, IntegerVector Dx, IntegerVector Dy, IntegerVector Dz, IntegerVector target_dims, int method);
RcppExport SEXP _utils4ni_deform_volume_candidates(SEXP VSEXP, SEXP DxSEXP, SEXP DySEXP, SEXP DzSEXP, SEXP target_dimsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dx(DxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dy(DySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dz(DzSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_dims(target_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(deform_volume_candidates(V, Dx, Dy, Dz, target_dims, method));
    return rcpp_result_gen;
END_RCPP
}
// generate_random
IntegerVector generate_random(int min, int max, int n);
RcppExport SEXP _utils4ni_generate_random(SEXP minSEXP, SEXP maxSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type min(minSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random(min, max, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_utils4ni_adaptive_nonlocal_means_denoising", (DL_FUNC) &_utils4ni_adaptive_nonlocal_means_denoising, 5},
    {"_utils4ni_cCreateMask", (DL_FUNC) &_utils4ni_cCreateMask, 4},
    {"_utils4ni_cTruncado", (DL_FUNC) &_utils4ni_cTruncado, 2},
    {"_utils4ni_cgradientmodule", (DL_FUNC) &_utils4ni_cgradientmodule, 2},
    {"_utils4ni_confusion_matrix", (DL_FUNC) &_utils4ni_confusion_matrix, 2},
    {"_utils4ni_connected_components", (DL_FUNC) &_utils4ni_connected_components, 1},
    {"_utils4ni_cvolfilter2d", (DL_FUNC) &_utils4ni_cvolfilter2d, 3},
    {"_utils4ni_defuzzify", (DL_FUNC) &_utils4ni_defuzzify, 2},
    {"_utils4ni_defuzzify_list", (DL_FUNC) &_utils4ni_defuzzify_list, 2},
    {"_utils4ni_extend_labels", (DL_FUNC) &_utils4ni_extend_labels, 2},
    {"_utils4ni_map_ids_workhorse", (DL_FUNC) &_utils4ni_map_ids_workhorse, 3},
    {"_utils4ni_map_extra_classes", (DL_FUNC) &_utils4ni_map_extra_classes, 3},
    {"_utils4ni_mask_values", (DL_FUNC) &_utils4ni_mask_values, 5},
    {"_utils4ni_get_neighbours", (DL_FUNC) &_utils4ni_get_neighbours, 2},
    {"_utils4ni_fast_read_nifti", (DL_FUNC) &_utils4ni_fast_read_nifti, 1},
    {"_utils4ni_read_nifti_batch_4d", (DL_FUNC) &_utils4ni_read_nifti_batch_4d, 1},
    {"_utils4ni_read_nifti", (DL_FUNC) &_utils4ni_read_nifti, 1},
    {"_utils4ni_constrained_init_memory", (DL_FUNC) &_utils4ni_constrained_init_memory, 7},
    {"_utils4ni_patches_similarity_memory", (DL_FUNC) &_utils4ni_patches_similarity_memory, 8},
    {"_utils4ni_propagation_step_memory", (DL_FUNC) &_utils4ni_propagation_step_memory, 11},
    {"_utils4ni_constrained_random_search_memory", (DL_FUNC) &_utils4ni_constrained_random_search_memory, 11},
    {"_utils4ni_label_fusion_memory", (DL_FUNC) &_utils4ni_label_fusion_memory, 11},
    {"_utils4ni_obtain_candidates_memory", (DL_FUNC) &_utils4ni_obtain_candidates_memory, 8},
    {"_utils4ni_count_elegible", (DL_FUNC) &_utils4ni_count_elegible, 5},
    {"_utils4ni_count_elegible_masked", (DL_FUNC) &_utils4ni_count_elegible_masked, 6},
    {"_utils4ni_constrained_initialization_omp", (DL_FUNC) &_utils4ni_constrained_initialization_omp, 8},
    {"_utils4ni_all_patches_similarity_omp", (DL_FUNC) &_utils4ni_all_patches_similarity_omp, 9},
    {"_utils4ni_propagation_step_omp", (DL_FUNC) &_utils4ni_propagation_step_omp, 12},
    {"_utils4ni_constrained_random_search_omp", (DL_FUNC) &_utils4ni_constrained_random_search_omp, 12},
    {"_utils4ni_label_fusion2_omp", (DL_FUNC) &_utils4ni_label_fusion2_omp, 11},
    {"_utils4ni_label_fusion_omp_fast", (DL_FUNC) &_utils4ni_label_fusion_omp_fast, 12},
    {"_utils4ni_label_fusion_mode", (DL_FUNC) &_utils4ni_label_fusion_mode, 4},
    {"_utils4ni_image_fusion_omp", (DL_FUNC) &_utils4ni_image_fusion_omp, 11},
    {"_utils4ni_get_windows_at", (DL_FUNC) &_utils4ni_get_windows_at, 5},
    {"_utils4ni_results_to_volume", (DL_FUNC) &_utils4ni_results_to_volume, 7},
    {"_utils4ni_results_to_volume_label", (DL_FUNC) &_utils4ni_results_to_volume_label, 6},
    {"_utils4ni_results_to_volume_label_with_distance", (DL_FUNC) &_utils4ni_results_to_volume_label_with_distance, 7},
    {"_utils4ni_regularize", (DL_FUNC) &_utils4ni_regularize, 3},
    {"_utils4ni_sum_4d", (DL_FUNC) &_utils4ni_sum_4d, 1},
    {"_utils4ni_sum_by_ROI", (DL_FUNC) &_utils4ni_sum_by_ROI, 2},
    {"_utils4ni_max_by_ROI", (DL_FUNC) &_utils4ni_max_by_ROI, 2},
    {"_utils4ni_min_by_ROI", (DL_FUNC) &_utils4ni_min_by_ROI, 2},
    {"_utils4ni_count_by_ROI", (DL_FUNC) &_utils4ni_count_by_ROI, 1},
    {"_utils4ni_mean_by_ROI", (DL_FUNC) &_utils4ni_mean_by_ROI, 2},
    {"_utils4ni_segmentation", (DL_FUNC) &_utils4ni_segmentation, 2},
    {"_utils4ni_which_max", (DL_FUNC) &_utils4ni_which_max, 1},
    {"_utils4ni_to_categorical_volume_cpp", (DL_FUNC) &_utils4ni_to_categorical_volume_cpp, 2},
    {"_utils4ni_transform_volume", (DL_FUNC) &_utils4ni_transform_volume, 4},
    {"_utils4ni_deform_volume", (DL_FUNC) &_utils4ni_deform_volume, 6},
    {"_utils4ni_deform_volume_candidates", (DL_FUNC) &_utils4ni_deform_volume_candidates, 6},
    {"_utils4ni_generate_random", (DL_FUNC) &_utils4ni_generate_random, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_utils4ni(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
