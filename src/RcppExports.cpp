// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// adaptive_nonlocal_means_denoising
NumericVector adaptive_nonlocal_means_denoising(NumericVector ima, IntegerVector dims, int v, int f, double h);
RcppExport SEXP _utils4ni_adaptive_nonlocal_means_denoising(SEXP imaSEXP, SEXP dimsSEXP, SEXP vSEXP, SEXP fSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptive_nonlocal_means_denoising(ima, dims, v, f, h));
    return rcpp_result_gen;
END_RCPP
}
// cCreateMask
NumericVector cCreateMask(NumericVector ima, IntegerVector dims, int c, NumericVector medias);
RcppExport SEXP _utils4ni_cCreateMask(SEXP imaSEXP, SEXP dimsSEXP, SEXP cSEXP, SEXP mediasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type medias(mediasSEXP);
    rcpp_result_gen = Rcpp::wrap(cCreateMask(ima, dims, c, medias));
    return rcpp_result_gen;
END_RCPP
}
// cgradientmodule
NumericVector cgradientmodule(NumericVector ima, IntegerVector dims);
RcppExport SEXP _utils4ni_cgradientmodule(SEXP imaSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cgradientmodule(ima, dims));
    return rcpp_result_gen;
END_RCPP
}
// connected_components
IntegerVector connected_components(IntegerVector image);
RcppExport SEXP _utils4ni_connected_components(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(connected_components(image));
    return rcpp_result_gen;
END_RCPP
}
// cTruncado
NumericVector cTruncado(NumericVector ima, IntegerVector dims);
RcppExport SEXP _utils4ni_cTruncado(SEXP imaSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cTruncado(ima, dims));
    return rcpp_result_gen;
END_RCPP
}
// cvolfilter2d
NumericVector cvolfilter2d(NumericVector ima, IntegerVector dims, int v);
RcppExport SEXP _utils4ni_cvolfilter2d(SEXP imaSEXP, SEXP dimsSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ima(imaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cvolfilter2d(ima, dims, v));
    return rcpp_result_gen;
END_RCPP
}
// defuzzify
IntegerVector defuzzify(NumericVector image);
RcppExport SEXP _utils4ni_defuzzify(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(defuzzify(image));
    return rcpp_result_gen;
END_RCPP
}
// extend_labels
IntegerVector extend_labels(IntegerVector pIn, IntegerVector maskImage);
RcppExport SEXP _utils4ni_extend_labels(SEXP pInSEXP, SEXP maskImageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type pIn(pInSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type maskImage(maskImageSEXP);
    rcpp_result_gen = Rcpp::wrap(extend_labels(pIn, maskImage));
    return rcpp_result_gen;
END_RCPP
}
// map_ids_workhorse
IntegerVector map_ids_workhorse(IntegerVector x, IntegerVector source, IntegerVector target);
RcppExport SEXP _utils4ni_map_ids_workhorse(SEXP xSEXP, SEXP sourceSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(map_ids_workhorse(x, source, target));
    return rcpp_result_gen;
END_RCPP
}
// map_extra_classes
IntegerVector map_extra_classes(IntegerVector x, IntegerVector source, int remaining);
RcppExport SEXP _utils4ni_map_extra_classes(SEXP xSEXP, SEXP sourceSEXP, SEXP remainingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int >::type remaining(remainingSEXP);
    rcpp_result_gen = Rcpp::wrap(map_extra_classes(x, source, remaining));
    return rcpp_result_gen;
END_RCPP
}
// mask_values
NumericVector mask_values(NumericVector input, double low, double high, double in_val, double out_val);
RcppExport SEXP _utils4ni_mask_values(SEXP inputSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP in_valSEXP, SEXP out_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type in_val(in_valSEXP);
    Rcpp::traits::input_parameter< double >::type out_val(out_valSEXP);
    rcpp_result_gen = Rcpp::wrap(mask_values(input, low, high, in_val, out_val));
    return rcpp_result_gen;
END_RCPP
}
// get_neighbours
IntegerVector get_neighbours(NumericVector array, int width);
RcppExport SEXP _utils4ni_get_neighbours(SEXP arraySEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_neighbours(array, width));
    return rcpp_result_gen;
END_RCPP
}
// fast_read_nifti
NumericVector fast_read_nifti(SEXP filename);
RcppExport SEXP _utils4ni_fast_read_nifti(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_read_nifti(filename));
    return rcpp_result_gen;
END_RCPP
}
// regularize
NumericVector regularize(NumericVector image, NumericVector kernel);
RcppExport SEXP _utils4ni_regularize(SEXP imageSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(regularize(image, kernel));
    return rcpp_result_gen;
END_RCPP
}
// sum_by_ROI
NumericVector sum_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_sum_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// max_by_ROI
NumericVector max_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_max_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(max_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// min_by_ROI
NumericVector min_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_min_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(min_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// count_by_ROI
IntegerVector count_by_ROI(IntegerVector labelled);
RcppExport SEXP _utils4ni_count_by_ROI(SEXP labelledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    rcpp_result_gen = Rcpp::wrap(count_by_ROI(labelled));
    return rcpp_result_gen;
END_RCPP
}
// mean_by_ROI
NumericVector mean_by_ROI(IntegerVector labelled, NumericVector values);
RcppExport SEXP _utils4ni_mean_by_ROI(SEXP labelledSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labelled(labelledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_by_ROI(labelled, values));
    return rcpp_result_gen;
END_RCPP
}
// segmentation
NumericVector segmentation(NumericVector image, NumericVector otsu_estimates);
RcppExport SEXP _utils4ni_segmentation(SEXP imageSEXP, SEXP otsu_estimatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type otsu_estimates(otsu_estimatesSEXP);
    rcpp_result_gen = Rcpp::wrap(segmentation(image, otsu_estimates));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_utils4ni_adaptive_nonlocal_means_denoising", (DL_FUNC) &_utils4ni_adaptive_nonlocal_means_denoising, 5},
    {"_utils4ni_cCreateMask", (DL_FUNC) &_utils4ni_cCreateMask, 4},
    {"_utils4ni_cgradientmodule", (DL_FUNC) &_utils4ni_cgradientmodule, 2},
    {"_utils4ni_connected_components", (DL_FUNC) &_utils4ni_connected_components, 1},
    {"_utils4ni_cTruncado", (DL_FUNC) &_utils4ni_cTruncado, 2},
    {"_utils4ni_cvolfilter2d", (DL_FUNC) &_utils4ni_cvolfilter2d, 3},
    {"_utils4ni_defuzzify", (DL_FUNC) &_utils4ni_defuzzify, 1},
    {"_utils4ni_extend_labels", (DL_FUNC) &_utils4ni_extend_labels, 2},
    {"_utils4ni_map_ids_workhorse", (DL_FUNC) &_utils4ni_map_ids_workhorse, 3},
    {"_utils4ni_map_extra_classes", (DL_FUNC) &_utils4ni_map_extra_classes, 3},
    {"_utils4ni_mask_values", (DL_FUNC) &_utils4ni_mask_values, 5},
    {"_utils4ni_get_neighbours", (DL_FUNC) &_utils4ni_get_neighbours, 2},
    {"_utils4ni_fast_read_nifti", (DL_FUNC) &_utils4ni_fast_read_nifti, 1},
    {"_utils4ni_regularize", (DL_FUNC) &_utils4ni_regularize, 2},
    {"_utils4ni_sum_by_ROI", (DL_FUNC) &_utils4ni_sum_by_ROI, 2},
    {"_utils4ni_max_by_ROI", (DL_FUNC) &_utils4ni_max_by_ROI, 2},
    {"_utils4ni_min_by_ROI", (DL_FUNC) &_utils4ni_min_by_ROI, 2},
    {"_utils4ni_count_by_ROI", (DL_FUNC) &_utils4ni_count_by_ROI, 1},
    {"_utils4ni_mean_by_ROI", (DL_FUNC) &_utils4ni_mean_by_ROI, 2},
    {"_utils4ni_segmentation", (DL_FUNC) &_utils4ni_segmentation, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_utils4ni(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
